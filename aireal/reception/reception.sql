CREATE TABLE movability (
    name VARCHAR NOT NULL, 
    CONSTRAINT pk_movability PRIMARY KEY (name)
    );



CREATE TABLE locationtype (
    name VARCHAR NOT NULL,
    movable VARCHAR NOT NULL,
    has_models BOOLEAN DEFAULT false NOT NULL,
    has_temperature BOOLEAN DEFAULT false NOT NULL,
    has_volume BOOLEAN DEFAULT false NOT NULL,
    deleted BOOLEAN DEFAULT false NOT NULL,
    CONSTRAINT pk_locationtype PRIMARY KEY (name),
    CONSTRAINT fk_locationtype_movable_movability FOREIGN KEY (movable) REFERENCES movability (name),
    CONSTRAINT ck_locationtype_inbuilt_not_models CHECK (((movable = 'inbuilt') AND (has_models = false)) OR (movable <> 'inbuilt')),
    CONSTRAINT ck_locationtype_temperature_has_models CHECK ((has_temperature AND has_models) OR (NOT has_temperature)),
    CONSTRAINT ck_locationtype_volume_has_models CHECK ((has_volume AND has_models) OR (NOT has_volume))
    );



CREATE TABLE locationtype_locationtype (
    parent VARCHAR NOT NULL,
    child VARCHAR NOT NULL,
    model_dependent BOOLEAN DEFAULT false NOT NULL,
    CONSTRAINT pk_locationtype_locationtype PRIMARY KEY (parent, child, model_dependent),
    CONSTRAINT fk_locationtype_locationtype_parent_locationtype FOREIGN KEY (parent) REFERENCES locationtype (name),
    CONSTRAINT fk_locationtype_locationtype_child_locationtype FOREIGN KEY (child) REFERENCES locationtype (name)
    );



CREATE TABLE locationmodel (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR,
    locationtype VARCHAR NOT NULL,
    movable VARCHAR NOT NULL,
    temperature INTEGER,
    volume FLOAT,
    childtype VARCHAR,
    column_count INTEGER,
    row_count INTEGER,
    deleted BOOLEAN DEFAULT false NOT NULL,
    CONSTRAINT pk_locationmodel PRIMARY KEY (id),
    CONSTRAINT uq_locationmodel_name UNIQUE (name),
    CONSTRAINT fk_locationmodel_movable_movability FOREIGN KEY (movable) REFERENCES movability (name), 
    CONSTRAINT fk_locationmodel_locationtype_locationtype FOREIGN KEY (locationtype) REFERENCES locationtype (name),
    CONSTRAINT fk_locationmodel_childtype_locationtype FOREIGN KEY (childtype) REFERENCES locationtype (name)
    CONSTRAINT ck_locationmodel_name_not_zero_length CHECK (name <> '');
    CONSTRAINT ck_locationmodel_childtype_not_zero_length CHECK (childtype <> '');
    );



CREATE TABLE locationmodel_locationmodel (
    parent_id INTEGER NOT NULL,
    child_id INTEGER NOT NULL,
    CONSTRAINT pk_locationmodel_locationmodel PRIMARY KEY (parent_id, child_id),
    CONSTRAINT fk_locationmodel_locationmodel_parent_locationmodel FOREIGN KEY (parent_id) REFERENCES locationmodel (id),
    CONSTRAINT fk_locationmodel_locationmodel_child_locationmodel FOREIGN KEY (child_id) REFERENCES locationmodel (id)
    );



CREATE TABLE location (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR NOT NULL,
    barcode VARCHAR,
    locationtype VARCHAR NOT NULL,
    movable VARCHAR NOT NULL,
    locationmodel_id INTEGER,
    temperature INTEGER,
    volume FLOAT,
    parent_id INTEGER,
    deleted BOOLEAN DEFAULT false NOT NULL,
    deletion_constraint BOOLEAN DEFAULT false NOT NULL,
    CONSTRAINT pk_location PRIMARY KEY (id),
    CONSTRAINT uq_location_barcode UNIQUE (barcode),
    CONSTRAINT uq_location_id_deleted UNIQUE (id, deleted), -- only needed for fk constraint to prevent locations in deleted locations
    CONSTRAINT fk_location_movable_movability FOREIGN KEY (movable) REFERENCES movability (name),
    CONSTRAINT fk_location_locationmodel_id_locationmodel FOREIGN KEY (locationmodel_id) REFERENCES locationmodel (id),
    CONSTRAINT fk_location_locationtype_locationtype FOREIGN KEY (locationtype) REFERENCES locationtype (name),
    CONSTRAINT fk_location_parent_id_deletion_constraint_location FOREIGN KEY (parent_id, deletion_constraint) REFERENCES location (id, deleted),
    CONSTRAINT ck_location_parent_id_not_null CHECK ((parent_id IS NULL) = (locationtype = 'Home'))
    CONSTRAINT ck_location_barcode_not_zero_length CHECK (barcode <> '');
    );
CREATE UNIQUE INDEX ix_location_name ON location (name) WHERE movable <> 'inbuilt';
CREATE INDEX ix_location_barcode ON location (barcode);



CREATE TABLE movementhistory (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
    location_id INTEGER NOT NULL, 
    container_id INTEGER NOT NULL, 
    timeperiod tstzrange NOT NULL, 
    CONSTRAINT pk_movementhistory PRIMARY KEY (id), 
    CONSTRAINT fk_movementhistory_container_id_location FOREIGN KEY(container_id) REFERENCES location (id),
    CONSTRAINT fk_movementhistory_location_id_location FOREIGN KEY(location_id) REFERENCES location (id),
    EXCLUDE USING GIST (location_id WITH =, timeperiod WITH &&)
    );
CREATE INDEX ix_movementhistory_location_id on movementhistory (location_id);
CREATE INDEX ix_movementhistory_container_id on movementhistory (container_id);
CREATE INDEX ix_movementhistory_timeperiod on movementhistory USING GIST (timeperiod);



CREATE TABLE movementrecord (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
    location_id INTEGER NOT NULL, 
    container_id INTEGER NOT NULL, 
    users_id INTEGER, 
    ip_address INET, 
    movement_datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, 
    explanation VARCHAR, -- reasoning behind delete / restore actions 
    recorded_datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, 
    deleted BOOLEAN DEFAULT false NOT NULL, 
    CONSTRAINT pk_movementrecord PRIMARY KEY (id), 
    CONSTRAINT fk_movementrecord_container_id_location FOREIGN KEY(container_id) REFERENCES location (id),
    CONSTRAINT fk_movementrecord_location_id_location FOREIGN KEY(location_id) REFERENCES location (id),
    CONSTRAINT fk_movementrecord_users_id_user FOREIGN KEY(users_id) REFERENCES users (id)
    );
CREATE INDEX ix_movementrecord_location_id on movementrecord (location_id);
CREATE INDEX ix_movementrecord_container_id on movementrecord (container_id);
CREATE INDEX ix_movementrecord_users_id on movementrecord (users_id);

--DROP TABLE movementrecord, movementhistory, location, locationmodel_locationmodel, locationmodel, locationtype_locationtype, locationtype, movability;

INSERT INTO role (name) VALUES ('Reception');

INSERT INTO movability (name) VALUES ('inbuilt');
INSERT INTO movability (name) VALUES ('fixed');
INSERT INTO movability (name) VALUES ('mobile');

INSERT INTO tubematerial (name) VALUES ('LoBind');
INSERT INTO tubematerial (name) VALUES ('Standard');

INSERT INTO locationtype (name, movable, has_models, has_volume) VALUES ('Tube', 'mobile', true, true);
INSERT INTO locationtype (name, movable) VALUES ('Position', 'inbuilt');
INSERT INTO locationtype (name, movable, has_models) VALUES ('Box', 'mobile', true);
INSERT INTO locationtype (name, movable) VALUES ('Tray', 'inbuilt');
INSERT INTO locationtype (name, movable) VALUES ('Shelf', 'inbuilt');
INSERT INTO locationtype (name, movable, has_models) VALUES ('Rack', 'mobile', true);
INSERT INTO locationtype (name, movable, has_models) VALUES ('Cupboard', 'fixed', true);
INSERT INTO locationtype (name, movable, has_models, has_temperature) VALUES ('Freezer', 'fixed', true, true);
INSERT INTO locationtype (name, movable, has_models, has_temperature) VALUES ('Fridge', 'fixed', true, true);
INSERT INTO locationtype (name, movable, has_models, has_temperature) VALUES ('Archive', 'fixed', true, true);
INSERT INTO locationtype (name, movable) VALUES ('Room', 'fixed');
INSERT INTO locationtype (name, movable) VALUES ('Building', 'fixed');
INSERT INTO locationtype (name, movable) VALUES ('Site', 'fixed');
INSERT INTO locationtype (name, movable) VALUES ('Home', 'inbuilt');

INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Site');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Building');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Room');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Archive');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Fridge');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Freezer');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Cupboard');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Building');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Room');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Archive');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Fridge');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Freezer');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Cupboard');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Building', 'Room');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Building', 'Archive');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Building', 'Fridge');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Building', 'Freezer');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Building', 'Cupboard');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Room', 'Archive');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Room', 'Fridge');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Room', 'Freezer');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Room', 'Cupboard');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Archive', 'Box');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Fridge', 'Shelf');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Freezer', 'Shelf');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Cupboard', 'Shelf');
INSERT INTO locationtype_locationtype (parent, child, model_dependent) VALUES ('Shelf', 'Rack', true);
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Shelf', 'Box');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Rack', 'Tray');
INSERT INTO locationtype_locationtype (parent, child, model_dependent) VALUES ('Tray', 'Box', true);
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Box', 'Position');
INSERT INTO locationtype_locationtype (parent, child, model_dependent) VALUES ('Position', 'Tube', true);
                
INSERT INTO location (name, locationtype, movable) VALUES ('Home', 'Home', 'inbuilt');






