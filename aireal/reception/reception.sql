CREATE TABLE tubematerial (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
    name VARCHAR NOT NULL, 
    attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
    deleted BOOLEAN DEFAULT false NOT NULL, 
    CONSTRAINT pk_tubematerial PRIMARY KEY (id)
    );



CREATE TABLE locationtype (
    name VARCHAR NOT NULL, 
    movable movability NOT NULL, 
    attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
    deleted BOOLEAN DEFAULT false NOT NULL, 
    CONSTRAINT pk_locationtype PRIMARY KEY (name),
    CONSTRAINT uq_locationtype_name UNIQUE (name, movable) -- only needed for fk constraint in locationmodel
    );



CREATE TABLE locationtype_locationtype (
    parent VARCHAR NOT NULL, 
    child VARCHAR NOT NULL, 
    CONSTRAINT uq_locationtype_locationtype_parent UNIQUE (parent, child), 
    CONSTRAINT fk_locationtype_locationtype_parent_locationtype FOREIGN KEY(parent) REFERENCES locationtype (name), 
    CONSTRAINT fk_locationtype_locationtype_child_locationtype FOREIGN KEY(child) REFERENCES locationtype (name)
    );



CREATE TABLE locationmodel (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
    name VARCHAR, 
    locationtype VARCHAR NOT NULL, 
    movable movability NOT NULL, 
    temperature INTEGER,
    volume INTEGER,
    component_id INTEGER,
    component_number INTEGER,
    attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
    deleted BOOLEAN DEFAULT false NOT NULL, 
    CONSTRAINT pk_locationmodel PRIMARY KEY (id), 
    CONSTRAINT fk_locationmodel_locationtype_locationtype FOREIGN KEY(locationtype, movable) REFERENCES locationtype (name, movable),
    CONSTRAINT fk_locationmodel_component_id_component FOREIGN KEY(component_id) REFERENCES locationmodel (id),
    CONSTRAINT uq_locationmodel_id_movable UNIQUE (id, movable) -- only needed for fk constraint in location
    );
CREATE UNIQUE INDEX ix_locationmodel_name ON locationmodel (name) WHERE movable != 'inbuilt';
CREATE INDEX ix_locationmodel_locationtype ON locationmodel (locationtype); -- table likely to be too small to use this
CREATE INDEX ix_locationmodel_id ON locationmodel (id, movable); -- table likely to be too small to use this



CREATE TABLE position (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY,
    locationmodel_id INTEGER NOT NULL,
    name VARCHAR NOT NULL, 
    CONSTRAINT pk_position PRIMARY KEY (id),
    CONSTRAINT fk_position_locationmodel_id FOREIGN KEY(locationmodel_id) REFERENCES locationmodel (id), 
    CONSTRAINT uq_position_name UNIQUE (name, locationmodel_id)
    );



CREATE TABLE location (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
    name VARCHAR NOT NULL, 
    barcode VARCHAR, 
    movable movability NOT NULL, 
    locationmodel_id INTEGER NOT NULL, 
    parent_id INTEGER, 
    position_id INTEGER,
    attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
    deleted BOOLEAN DEFAULT false NOT NULL, 
    deletion_constraint BOOLEAN GENERATED ALWAYS AS (false) STORED, 
    CONSTRAINT pk_location PRIMARY KEY (id), 
    CONSTRAINT uq_location_barcode UNIQUE (barcode), 
    CONSTRAINT uq_location_position_id UNIQUE (position_id, parent_id), 
    CONSTRAINT uq_location_id_deleted UNIQUE (id, deleted), -- only needed for fk constraint to prevent locations in deleted locations
    CONSTRAINT fk_location_position_id_position FOREIGN KEY(position_id) REFERENCES position (id), 
    CONSTRAINT fk_location_locationmodel_id_locationmodel FOREIGN KEY(locationmodel_id, movable) REFERENCES locationmodel (id, movable), 
    CONSTRAINT fk_location_parent_id_deletion_constraint_location FOREIGN KEY(parent_id, deletion_constraint) REFERENCES location (id, deleted), -- to prevent locations in deleted locations
    CONSTRAINT fk_location_parent_id_location FOREIGN KEY(parent_id) REFERENCES location (id)
    );
CREATE UNIQUE INDEX ix_location_name ON location (name) WHERE movable != 'inbuilt';
CREATE INDEX ix_location_barcode ON location (barcode);
CREATE INDEX ix_location_locationmodel_id ON location (locationmodel_id);
CREATE INDEX ix_location_parent_id ON location (parent_id);
CREATE INDEX ix_location_position_id ON location (position_id);



CREATE TABLE movementhistory (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
    location_id INTEGER NOT NULL, 
    container_id INTEGER NOT NULL, 
    timeperiod tstzrange NOT NULL, 
    CONSTRAINT pk_movementhistory PRIMARY KEY (id), 
    CONSTRAINT fk_movementhistory_container_id_location FOREIGN KEY(container_id) REFERENCES location (id),
    CONSTRAINT fk_movementhistory_location_id_location FOREIGN KEY(location_id) REFERENCES location (id),
    EXCLUDE USING GIST (location_id WITH =, timeperiod WITH &&)
    );
CREATE INDEX ix_movementhistory_location_id on movementhistory (location_id);
CREATE INDEX ix_movementhistory_container_id on movementhistory (container_id);
CREATE INDEX ix_movementhistory_timeperiod on movementhistory USING GIST (timeperiod);



CREATE TABLE movementrecord (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
    location_id INTEGER NOT NULL, 
    container_id INTEGER NOT NULL, 
    users_id INTEGER, 
    ip_address INET, 
    movement_datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, 
    explanation VARCHAR, -- reasoning behind delete / restore actions 
    recorded_datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, 
    deleted BOOLEAN DEFAULT false NOT NULL, 
    CONSTRAINT pk_movementrecord PRIMARY KEY (id), 
    CONSTRAINT fk_movementrecord_container_id_location FOREIGN KEY(container_id) REFERENCES location (id),
    CONSTRAINT fk_movementrecord_location_id_location FOREIGN KEY(location_id) REFERENCES location (id),
    CONSTRAINT fk_movementrecord_users_id_user FOREIGN KEY(users_id) REFERENCES users (id)
    );
CREATE INDEX ix_movementrecord_location_id on movementrecord (location_id);
CREATE INDEX ix_movementrecord_container_id on movementrecord (container_id);
CREATE INDEX ix_movementrecord_users_id on movementrecord (users_id);



INSERT INTO role (name) VALUES ('Reception');

INSERT INTO tubematerial (name) VALUES ('LoBind');
INSERT INTO tubematerial (name) VALUES ('Standard');

INSERT INTO locationtype (name, movable) VALUES ('Home', 'inbuilt');
INSERT INTO locationtype (name, movable) VALUES ('Site', 'fixed');
INSERT INTO locationtype (name, movable) VALUES ('Building', 'fixed');
INSERT INTO locationtype (name, movable, attr) VALUES ('Room', 'fixed', '{"has-temperature": true}');
INSERT INTO locationtype (name, movable, attr) VALUES ('Archive', 'fixed', '{"has-temperature": true}');
INSERT INTO locationtype (name, movable, attr) VALUES ('Fridge', 'fixed', '{"has-temperature": true, "has-shelves": true}');
INSERT INTO locationtype (name, movable, attr) VALUES ('Freezer', 'fixed', '{"has-temperature": true, "has-shelves": true}');
INSERT INTO locationtype (name, movable, attr) VALUES ('Cupboard', 'fixed', '{"has-shelves": true}');
INSERT INTO locationtype (name, movable, attr) VALUES ('Rack', 'mobile', '{"has-size": true, "has-trays": true}');
INSERT INTO locationtype (name, movable, attr) VALUES ('Shelf', 'inbuilt', '{"has-internal-size": true}');
INSERT INTO locationtype (name, movable, attr) VALUES ('Tray', 'inbuilt', '{"has-positions": true}');
INSERT INTO locationtype (name, movable, attr) VALUES ('Box', 'mobile', '{"has-size": true, "has-positions": true, "min-volume": "?", "max-volume": "?", "content-brand": "?"}');
INSERT INTO locationtype (name, movable, attr) VALUES ('Tube', 'mobile', '{"contains-material": true}');

INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Site');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Building');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Room');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Archive');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Fridge');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Freezer');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Home', 'Cupboard');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Building');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Room');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Archive');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Fridge');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Freezer');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Site', 'Cupboard');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Building', 'Room');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Building', 'Archive');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Building', 'Fridge');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Building', 'Freezer');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Building', 'Cupboard');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Room', 'Archive');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Room', 'Fridge');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Room', 'Freezer');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Room', 'Cupboard');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Archive', 'Box');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Fridge', 'Shelf');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Freezer', 'Shelf');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Cupboard', 'Shelf');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Shelf', 'Rack');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Shelf', 'Box');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Rack', 'Tray');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Tray', 'Box');
INSERT INTO locationtype_locationtype (parent, child) VALUES ('Box', 'Tube');
                
INSERT INTO locationmodel (name, locationtype, movable) VALUES ('Home', 'Home', 'inbuilt');
INSERT INTO locationmodel (name, locationtype, movable) VALUES ('Site', 'Site', 'fixed');
INSERT INTO locationmodel (name, locationtype, movable) VALUES ('Room', 'Room', 'fixed');
INSERT INTO locationmodel (name, locationtype, movable) VALUES ('Building', 'Building', 'fixed');

INSERT INTO location (name, locationmodel_id, movable) SELECT 'Home', locationmodel.id, 'inbuilt' FROM locationmodel WHERE locationmodel.name = 'Home';
