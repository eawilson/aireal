--CREATE EXTENSION IF NOT EXISTS btree_gist;
CREATE TYPE movability AS ENUM ('inbuilt', 'fixed', 'mobile');



CREATE TABLE IF NOT EXISTS role (
	name VARCHAR NOT NULL, 
	CONSTRAINT uq_role_name UNIQUE (name)
    );



CREATE TABLE IF NOT EXISTS material (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR NOT NULL, 
	CONSTRAINT pk_material PRIMARY KEY (id)
    );



CREATE TABLE IF NOT EXISTS pipeline (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR NOT NULL, 
	version VARCHAR NOT NULL, 
	script VARCHAR NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_pipeline PRIMARY KEY (id), 
	CONSTRAINT uq_pipeline_name UNIQUE (name)
    );



CREATE TABLE IF NOT EXISTS sequencing (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR NOT NULL, 
	platform VARCHAR NOT NULL, 
	status VARCHAR NOT NULL, 
	completion_datetime VARCHAR NOT NULL, 
	attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
	CONSTRAINT pk_sequencing PRIMARY KEY (id), 
	CONSTRAINT uq_sequencing_name UNIQUE (name)
    );



CREATE TABLE IF NOT EXISTS users (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR GENERATED ALWAYS AS (LEFT(forename, 1) || '.' || surname) STORED, 
	fullname VARCHAR GENERATED ALWAYS AS (surname || ', ' || forename) STORED, 
	email VARCHAR NOT NULL, 
	forename VARCHAR NOT NULL, 
	surname VARCHAR NOT NULL, 
	last_session JSONB DEFAULT '{}'::jsonb NOT NULL, 
	restricted BOOLEAN, 
	totp_secret VARCHAR, 
	password VARCHAR, 
	reset_datetime VARCHAR, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_user PRIMARY KEY (id), 
	CONSTRAINT uq_user_email UNIQUE (email)
    );



CREATE TABLE IF NOT EXISTS analysis (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	pipeline_id INTEGER, 
	sequencing_id INTEGER, 
	application VARCHAR, 
	version VARCHAR NOT NULL, 
	command_line VARCHAR NOT NULL, 
	log VARCHAR NOT NULL, 
	status VARCHAR NOT NULL, 
	attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_analysis PRIMARY KEY (id), 
	CONSTRAINT fk_analysis_pipeline_id_pipeline FOREIGN KEY(pipeline_id) REFERENCES pipeline (id), 
	CONSTRAINT fk_analysis_sequencing_id_sequencing FOREIGN KEY(sequencing_id) REFERENCES sequencing (id)
    );



    
    
    
    
    
CREATE TABLE IF NOT EXISTS tubematerial (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR NOT NULL, 
	attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_tubematerial PRIMARY KEY (id)
    );



CREATE TABLE IF NOT EXISTS locationtype (
	name VARCHAR NOT NULL, 
	movable movability NOT NULL, 
	attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_locationtype PRIMARY KEY (name),
	CONSTRAINT uq_locationtype_name UNIQUE (name, movable) -- only needed for fk constraint in locationmodel
    );



CREATE TABLE IF NOT EXISTS locationtype_locationtype (
	parent VARCHAR NOT NULL, 
	child VARCHAR NOT NULL, 
	CONSTRAINT uq_locationtype_locationtype_parent UNIQUE (parent, child), 
	CONSTRAINT fk_locationtype_locationtype_parent_locationtype FOREIGN KEY(parent) REFERENCES locationtype (name), 
	CONSTRAINT fk_locationtype_locationtype_child_locationtype FOREIGN KEY(child) REFERENCES locationtype (name)
    );



CREATE TABLE IF NOT EXISTS locationmodel (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR, 
	locationtype VARCHAR NOT NULL, 
	movable movability NOT NULL, 
	temperature INTEGER,
	volume INTEGER,
	attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_locationmodel PRIMARY KEY (id), 
	CONSTRAINT fk_locationmodel_locationtype_locationtype FOREIGN KEY(locationtype, movable) REFERENCES locationtype (name, movable),
	CONSTRAINT uq_locationmodel_name UNIQUE (id, movable) -- only needed for fk constraint in location
    );
CREATE UNIQUE INDEX ix_locationmodel_name ON locationmodel (name) WHERE movable != 'inbuilt';
CREATE INDEX ix_locationmodel_locationtype ON locationmodel (locationtype); -- table likely to be too small to use this
CREATE INDEX ix_locationmodel_id ON locationmodel (id, movable); -- table likely to be too small to use this



CREATE TABLE IF NOT EXISTS position (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY,
	locationmodel_id INTEGER NOT NULL,
	name VARCHAR NOT NULL, 
	CONSTRAINT pk_position PRIMARY KEY (id),
	CONSTRAINT fk_position_locationmodel_id FOREIGN KEY(locationmodel_id) REFERENCES locationmodel (id), 
	CONSTRAINT uq_position_name UNIQUE (name, locationmodel_id)
    );



CREATE TABLE IF NOT EXISTS location (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR NOT NULL, 
	barcode VARCHAR, 
	movable movability NOT NULL, 
	locationmodel_id INTEGER NOT NULL, 
	parent_id INTEGER, 
	position_id INTEGER,
	attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_location PRIMARY KEY (id), 
	CONSTRAINT uq_location_barcode UNIQUE (barcode), 
	CONSTRAINT uq_location_position_id UNIQUE (position_id, parent_id), 
	CONSTRAINT fk_location_position_id_position FOREIGN KEY(position_id) REFERENCES position (id), 
	CONSTRAINT fk_location_locationmodel_id_locationmodel FOREIGN KEY(locationmodel_id, movable) REFERENCES locationmodel (id, movable), 
	CONSTRAINT fk_location_parent_id_location FOREIGN KEY(parent_id) REFERENCES location (id)
    );
CREATE UNIQUE INDEX ix_location_name ON location (name) WHERE movable != 'inbuilt';
CREATE INDEX ix_location_barcode ON location (barcode);
CREATE INDEX ix_location_locationmodel_id ON location (locationmodel_id);
CREATE INDEX ix_location_parent_id ON location (parent_id);
CREATE INDEX ix_location_position_id ON location (position_id);



CREATE TABLE IF NOT EXISTS editrecord (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	tablename VARCHAR NOT NULL, 
	row_id INTEGER NOT NULL, 
	action VARCHAR NOT NULL, 
	details JSONB DEFAULT '{}'::jsonb NOT NULL, 
	users_id INTEGER, 
	ip_address INET, 
	edit_datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, 
 	CONSTRAINT pk_editrecord PRIMARY KEY (id), 
	CONSTRAINT fk_editrecord_users_id_user FOREIGN KEY(users_id) REFERENCES users (id)
    );
CREATE INDEX ix_editrecord_tablename on editrecord (tablename);
CREATE INDEX ix_editrecord_row_id on editrecord (row_id);



CREATE TABLE IF NOT EXISTS movementhistory (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	location_id INTEGER NOT NULL, 
	container_id INTEGER NOT NULL, 
	timeperiod tstzrange NOT NULL, 
	CONSTRAINT pk_movementhistory PRIMARY KEY (id), 
	CONSTRAINT fk_movementhistory_container_id_location FOREIGN KEY(container_id) REFERENCES location (id),
	CONSTRAINT fk_movementhistory_location_id_location FOREIGN KEY(location_id) REFERENCES location (id),
    EXCLUDE USING GIST (location_id WITH =, timeperiod WITH &&)
    );
CREATE INDEX ix_movementhistory_location_id on movementhistory (location_id);
CREATE INDEX ix_movementhistory_container_id on movementhistory (container_id);
CREATE INDEX ix_movementhistory_timeperiod on movementhistory USING GIST (timeperiod);



CREATE TABLE IF NOT EXISTS movementrecord (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	location_id INTEGER NOT NULL, 
	container_id INTEGER NOT NULL, 
	users_id INTEGER, 
	ip_address INET, 
	movement_datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	explanation VARCHAR, -- reasoning behind delete / restore actions 
	recorded_datetime TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_movementrecord PRIMARY KEY (id), 
	CONSTRAINT fk_movementrecord_container_id_location FOREIGN KEY(container_id) REFERENCES location (id),
	CONSTRAINT fk_movementrecord_location_id_location FOREIGN KEY(location_id) REFERENCES location (id),
	CONSTRAINT fk_movementrecord_users_id_user FOREIGN KEY(users_id) REFERENCES users (id)
    );
CREATE INDEX ix_movementrecord_location_id on movementrecord (location_id);
CREATE INDEX ix_movementrecord_container_id on movementrecord (container_id);
CREATE INDEX ix_movementrecord_users_id on movementrecord (users_id);



CREATE TABLE IF NOT EXISTS project (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	subject_attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
	collection_attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
	pipeline_id INTEGER, 
	default_pipeline_options JSONB DEFAULT '{}'::jsonb NOT NULL, 
	CONSTRAINT pk_project PRIMARY KEY (id), 
	CONSTRAINT uq_project_name UNIQUE (name), 
	CONSTRAINT uq_project_name UNIQUE (name), 
	CONSTRAINT fk_project_pipeline_id_pipeline FOREIGN KEY(pipeline_id) REFERENCES pipeline (id)
    );



CREATE TABLE IF NOT EXISTS role_users (
	users_id INTEGER NOT NULL, 
	name VARCHAR NOT NULL, 
	CONSTRAINT uq_user_role_users_id UNIQUE (users_id, name), 
	CONSTRAINT fk_user_role_users_id_user FOREIGN KEY(users_id) REFERENCES users (id), 
	CONSTRAINT fk_user_role_role_role FOREIGN KEY(name) REFERENCES role (name)
    );



CREATE TABLE IF NOT EXISTS subject (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR NOT NULL, 
	project_id INTEGER NOT NULL, 
	attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_subject PRIMARY KEY (id), 
	CONSTRAINT uq_subject_project_id UNIQUE (project_id, name), 
	CONSTRAINT fk_subject_project_id_project FOREIGN KEY(project_id) REFERENCES project (id)
    );



CREATE TABLE IF NOT EXISTS project_users (
	users_id INTEGER NOT NULL, 
	project_id INTEGER NOT NULL, 
	CONSTRAINT uq_user_project_users_id UNIQUE (users_id, project_id), 
	CONSTRAINT fk_user_project_users_id_user FOREIGN KEY(users_id) REFERENCES users (id), 
	CONSTRAINT fk_user_project_project_id_project FOREIGN KEY(project_id) REFERENCES project (id)
)   ;



CREATE TABLE IF NOT EXISTS collection (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	subject_id INTEGER, 
	collection_datetime TIMESTAMP WITH TIME ZONE, 
	received_datetime TIMESTAMP WITH TIME ZONE, 
	attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_collection PRIMARY KEY (id), 
	CONSTRAINT fk_collection_subject_id_subject FOREIGN KEY(subject_id) REFERENCES subject (id)
    );



CREATE TABLE IF NOT EXISTS file (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	name VARCHAR NOT NULL, 
	collection_id INTEGER NOT NULL, 
	analysis_id INTEGER, 
	type VARCHAR NOT NULL, 
	extension VARCHAR NOT NULL, 
	creation_datetime TIMESTAMP WITH TIME ZONE NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_file PRIMARY KEY (id), 
	CONSTRAINT uq_file_name UNIQUE (name), 
	CONSTRAINT fk_file_collection_id_collection FOREIGN KEY(collection_id) REFERENCES collection (id), 
	CONSTRAINT fk_file_analysis_id_analysis FOREIGN KEY(analysis_id) REFERENCES analysis (id)
    );



CREATE TABLE IF NOT EXISTS sample (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	collection_id INTEGER NOT NULL, 
	parent_id INTEGER, 
	project_id INTEGER NOT NULL, 
	material_id INTEGER NOT NULL, 
	creation_datetime TIMESTAMP WITH TIME ZONE NOT NULL, 
	location_id INTEGER NOT NULL, 
	attr JSONB DEFAULT '{}'::jsonb NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_sample PRIMARY KEY (id), 
	CONSTRAINT fk_sample_collection_id_collection FOREIGN KEY(collection_id) REFERENCES collection (id), 
	CONSTRAINT fk_sample_parent_id_sample FOREIGN KEY(parent_id) REFERENCES sample (id), 
	CONSTRAINT fk_sample_project_id_project FOREIGN KEY(project_id) REFERENCES project (id), 
	CONSTRAINT fk_sample_material_id_material FOREIGN KEY(material_id) REFERENCES material (id), 
	CONSTRAINT fk_sample_location_id_location FOREIGN KEY(location_id) REFERENCES location (id)
    );



CREATE TABLE IF NOT EXISTS diskfile (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY, 
	file_id INTEGER NOT NULL, 
	size INTEGER NOT NULL, 
	aws_bucket VARCHAR NOT NULL, 
	aws_key VARCHAR NOT NULL, 
	storage_class VARCHAR NOT NULL, 
	status VARCHAR NOT NULL, 
	deleted BOOLEAN DEFAULT false NOT NULL, 
	CONSTRAINT pk_diskfile PRIMARY KEY (id), 
	CONSTRAINT fk_diskfile_file_id_file FOREIGN KEY(file_id) REFERENCES file (id)
    );



CREATE TABLE IF NOT EXISTS analysis_files (
	file_id INTEGER NOT NULL, 
	analysis_id INTEGER NOT NULL, 
	CONSTRAINT uq_file_analysis_file_id UNIQUE (file_id, analysis_id), 
	CONSTRAINT fk_file_analysis_file_id_file FOREIGN KEY(file_id) REFERENCES file (id), 
	CONSTRAINT fk_file_analysis_analysis_id_analysis FOREIGN KEY(analysis_id) REFERENCES analysis (id)
    );



